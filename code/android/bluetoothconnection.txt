import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothClass;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import java.lang.reflect.Method;
import java.util.Locale;
import java.util.concurrent.TimeUnit;

public class BluetoothBond {

    private final BluetoothAdapter bluetoothAdapter;
    private final Context context;

    public BluetoothBond(BluetoothAdapter bluetoothAdapter, Context context) {
        this.bluetoothAdapter = bluetoothAdapter;
        this.context = context;
    }

    public void createBond(int timeout) {
        if (bluetoothAdapter != null) {
            BluetoothReceiver bluetoothReceiver = new BluetoothReceiver(bluetoothAdapter, true);
            IntentFilter intent = new IntentFilter(BluetoothDevice.ACTION_NAME_CHANGED);
            context.registerReceiver(bluetoothReceiver, intent);
            bluetoothAdapter.startDiscovery();
            int time = 0;
            while (!checkPairedDevices() && time < timeout) {
                time++;
                try {
                    Thread.sleep(1000);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            bluetoothAdapter.cancelDiscovery();
        }
    }

    public Boolean scanBluetoothDevices(int timeout) {
        if (bluetoothAdapter != null) {
            BluetoothReceiver bluetoothReceiver = new BluetoothReceiver(bluetoothAdapter, false);
            IntentFilter intent = new IntentFilter(BluetoothDevice.ACTION_NAME_CHANGED);
            context.registerReceiver(bluetoothReceiver, intent);
            bluetoothAdapter.startDiscovery();
            int time = 0;
            while (!bluetoothReceiver.discoverable && time < timeout) {
                time++;
                try {
                    Thread.sleep(1000);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            bluetoothAdapter.cancelDiscovery();
            return bluetoothReceiver.discoverable;
        }
        return false;
    }

    private boolean checkPairedDevices() {
        if (bluetoothAdapter == null) return false;
        for (BluetoothDevice device : bluetoothAdapter.getBondedDevices()) {
            if (--your device name or device category etc...---) {
                return true;
            }
        }
        return false;
    }

    public void removeBond() {
        for (BluetoothDevice device : bluetoothAdapter.getBondedDevices()) {
            if (--your device name or device category etc...---) {
                try {
                    Method method = device.getClass().getMethod("removeBond", (Class<?>[]) null);
                    method.invoke(device, (Object[]) null);
                    TimeUnit.SECONDS.sleep(2000);
                } catch (Exception e) {
                    System.out.println(
                            String.format(Locale.getDefault(), "Failed to unpair bluetooth device: %s",
                                    e.toString()));
                }
            }
        }
    }
}

class BluetoothReceiver extends BroadcastReceiver {

    private final BluetoothAdapter bluetoothAdapter;
    private final Boolean pair;
    public Boolean discoverable;

    public BluetoothReceiver(BluetoothAdapter bluetoothAdapter, boolean pair) {
        this.bluetoothAdapter = bluetoothAdapter;
        this.pair = pair;
        this.discoverable = false;
    }

    @Override
    public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();
        if (action != null && action.equals(BluetoothDevice.ACTION_NAME_CHANGED)) {
            BluetoothDevice bluetoothDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
            if (--your device name or device category etc...--- && !discoverable) {
                discoverable = true;
                if (pair) {
                    initializeBond(bluetoothDevice);
                } else {
                    bluetoothAdapter.cancelDiscovery();
                }
            } else {
                discoverable = false;
            }
        }
    }

    private void initializeBond(BluetoothDevice bluetoothDevice) {
        try {
            if (bluetoothDevice.createBond() && (bluetoothDevice.getBondState() == BluetoothDevice.BOND_BONDED
                    || bluetoothDevice.getBondState() == BluetoothDevice.BOND_BONDING)) {
                bluetoothAdapter.cancelDiscovery();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

